import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#from mpl_toolkits.mplot3d import Axes3D
import datetime as dt
import plotly.graph_objects as go
import plotly.express as px
import plotly.figure_factory as ff

#Импорт набора данных
df = pd.read_csv("powerconsumption.csv")

#Просмотр верхней части данных
df.head()

#Просмотр нижней части данных
df.tail()

#Просмотр верхней и нижней части данных
df

#Просмотр состава набора данных
df.shape

#Просмотр типа данных и проверка на нулевые значения
df.info()

df['Datetime'] = pd.to_datetime(df['Datetime'], format='%m/%d/%Y %H:%M').dt.strftime('%m/%d/%Y %H:%M')
df['Datetime'] = df['Datetime'].apply(lambda x: dt.datetime.strptime(x,'%m/%d/%Y %H:%M') if type(x)==str else pd.NaT)

df

df.info()

#Проверка на пропущенные значения
df.isnull().sum()

#Проверка на дубликаты в данных
df.duplicated().sum()

#Просмотр описательной статистики в наборе данных
df.describe()

#Просмотр описательной статистики в наборе данных с округлением до 2х знаков после запятой
df.describe().round(2)

#Создание нового столбца в наборе данных
df["Month"] = df["Datetime"].dt.month
df

#Установка индекса на столбец Datetime
df = df.set_index(df["Datetime"])
df

#Группировка данных по месяцам для более простого и эффективного построения трендов.
grouped = df.groupby('Month').mean(numeric_only=True)
grouped

fig = px.line(df,
              x="Datetime",
              y="PowerConsumption_Zone1",
              labels = {'Datetime':'Months of the year'},
              title = "Общая мощность, выработанная с января по декабрь в первой зоне")
fig.show()

fig = px.line(df,
              x="Datetime",
              y="PowerConsumption_Zone1",
              labels = {'Datetime':'Months of the year'},
              title = "Общая мощность, выработанная с января по декабрь")

fig.update_layout(
    template='plotly',
    font=dict(size=10),
    title={
        'text': "Общая мощность, выработанная с января по декабрь в первой зоне",
        'font': {'size': 25}
    }
)
fig.show()

fig = px.box(df,
        x=df.index.month,
        y="PowerConsumption_Zone1",
        color=df.index.month,
        labels = {"x" : "Месяцы"},
        title="Выработка электроэнергии | Месячная статистика ")

fig.update_traces(width=0.5)
fig.show()

fig = px.box(df,
        x=df.index.day,
        y="PowerConsumption_Zone1",
        color=df.index.day,
        labels = {"x" : "Дни"})

fig.update_traces(width=0.5)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="PowerConsumption_Zone1",
              labels = {'Month':'Месяцы'},
              color = "PowerConsumption_Zone1",
              title="Выработка электроэнергии в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="WindSpeed",
              labels = {'Month':'Месяцы'},
              color = "WindSpeed",
              title="Скорость ветра в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="Temperature",
              labels = {'Month':'Month in the year'},
              color = "Temperature",
              title="Температура воздуха в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.box(df,
             y="PowerConsumption_Zone1",
             title="Общая статистика выработки электроэнергии")

fig.show()

fig = px.box(df,
             y="WindSpeed",
             title="Общая статистика скорости ветра")

fig.show()

df_corr = df.corr()
df_corr

x = list(df_corr.columns)
y = list(df_corr.index)
z = np.array(df_corr)

fig = ff.create_annotated_heatmap(x = x,
                                  y = y,
                                  z = z,
                                  annotation_text = np.around(z, decimals=2))
fig.show()

fig = px.scatter_polar(df,
                       r="PowerConsumption_Zone1",
                       theta="WindSpeed")
fig.show()

fig = px.scatter(df,
                 x="WindSpeed",
                 y="PowerConsumption_Zone1",
                 title = "Power generated vs Wind Speed")
fig.show()

df.plot.scatter(y='PowerConsumption_Zone1', x='WindSpeed')

fig, ax = plt.subplots(figsize = (20,15))
plt.hist(df['PowerConsumption_Zone1'])
plt.title('Распределение выработки', fontsize = 24)
ax.set_xlabel('Все что угодно', fontsize = 24)
ax.set_ylabel('y' , fontsize = 24)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.show()

fig, ax = plt.subplots(figsize = (20,15))
plt.hist(df['WindSpeed'])
plt.title('Распределение скорости ветра', fontsize = 24)
ax.set_xlabel('x', fontsize = 24)
ax.set_ylabel('y' , fontsize = 24)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.show()

# Split the dataset into two dataframes
df = pd.read_csv("powerconsumption.csv")
df['Datetime'] = pd.to_datetime(df['Datetime'], format='%m/%d/%Y %H:%M').dt.strftime('%d/%m/%Y %H:%M')
df['Datetime'] = df['Datetime'].apply(lambda x: dt.datetime.strptime(x,'%d/%m/%Y %H:%M') if type(x)==str else pd.NaT)
df["Month"] = df["Datetime"].dt.month

# Print the first 5 rows of each dataframe
df_1_to_11.to_csv("1to11.csv", index=False)
df_12.to_csv("to12.csv", index=False)
print(df_1_to_11.head())
print(df_12.head())

df_1_to_11 = df[df['Month'].isin(range(1, 12))] # Select rows with months 1 to 11
df_12 = df[df['Month'] == 12] # Select rows with month 12

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import LSTM, Dense
import tensorflow as tf

df_1_to_11 = df_1_to_11.drop('Datetime', axis = 1)

# Split the dataset into training and test sets
train_df, test_df = train_test_split(df_1_to_11, test_size=0.2, random_state=42)

# Reshape the training and test data into a 3D array for LSTM input
X_train = train_df.drop("PowerConsumption_Zone1", axis=1).values.reshape(-1, 1, 8)
X_test = test_df.drop("PowerConsumption_Zone1", axis=1).values.reshape(-1, 1, 8)
y_train = train_df["PowerConsumption_Zone1"].values.reshape(-1, 1)
y_test = test_df["PowerConsumption_Zone1"].values.reshape(-1, 1)

# Create the LSTM model
model=Sequential()
model.add(LSTM(256,return_sequences=True,input_shape=(1, 8)))
model.add(LSTM(128,return_sequences=True))
model.add(LSTM(64))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')
model.summary()

# Create the LSTM model
model = Sequential()
model.add(LSTM(32, input_shape=(1, 8)))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='linear'))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

# Train the LSTM model
model.fit(X_train, y_train, epochs=20, verbose=0)

preds = model.predict(X_test)

#df_12 = df_12.read_csv('to2.csv')
df_12 = df_12.drop('Datetime', axis = 1)

next_24_hours_X = df_12[["Temperature", "Humidity", "WindSpeed", "GeneralDiffuseFlows", "DiffuseFlows", "PowerConsumption_Zone2", "PowerConsumption_Zone3", "Month"]].values.reshape(-1, 1, 8)
# Make predictions using the model
next_24_hours_preds = model.predict(next_24_hours_X)

# Add the predicted values to the original dataframe
df_12["PowerConsumption_Zone1"] = next_24_hours_preds.flatten()

# Write the updated data to the same excel file
df_12.to_csv("PredictData.csv", index=False)

data = pd.read_csv("to12.csv")
datapredict = pd.read_csv("PredictData.csv")
mapedf = np.mean(np.abs((data["PowerConsumption_Zone1"] - datapredict["PowerConsumption_Zone1"]) / data["PowerConsumption_Zone1"])) * 100
mape = np.mean(np.abs((y_test - preds) / y_test)) * 100
mae = mean_absolute_error(y_test, preds)
mse = mean_squared_error(y_test, preds)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, preds)

print("Метрики работы модели:")
print("__________________________________________________________________")
print("Model Percentage Mean Absolute Error: ", mape)
print("Mean Absolute Error: ", mae)
print("Mean Squared Error: ", mse)
print("Root Mean Squared Error: ", rmse)
print("R^2: ", r2)
print("Percentage Mean Absolute Error: ", mapedf)
print("__________________________________________________________________")

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#from mpl_toolkits.mplot3d import Axes3D
import datetime as dt
import plotly.graph_objects as go
import plotly.express as px
import plotly.figure_factory as ff

#Импорт набора данных
df = pd.read_csv("powerconsumption.csv")

#Просмотр верхней части данных
df.head()

#Просмотр нижней части данных
df.tail()

#Просмотр верхней и нижней части данных
df

#Просмотр состава набора данных
df.shape

#Просмотр типа данных и проверка на нулевые значения
df.info()

df['Datetime'] = pd.to_datetime(df['Datetime'], format='%m/%d/%Y %H:%M').dt.strftime('%m/%d/%Y %H:%M')
df['Datetime'] = df['Datetime'].apply(lambda x: dt.datetime.strptime(x,'%m/%d/%Y %H:%M') if type(x)==str else pd.NaT)

df

df.info()

#Проверка на пропущенные значения
df.isnull().sum()

#Проверка на дубликаты в данных
df.duplicated().sum()

#Просмотр описательной статистики в наборе данных
df.describe()

#Просмотр описательной статистики в наборе данных с округлением до 2х знаков после запятой
df.describe().round(2)

#Создание нового столбца в наборе данных
df["Month"] = df["Datetime"].dt.month
df

#Установка индекса на столбец Datetime
df = df.set_index(df["Datetime"])
df

#Группировка данных по месяцам для более простого и эффективного построения трендов.
grouped = df.groupby('Month').mean(numeric_only=True)
grouped

fig = px.line(df,
              x="Datetime",
              y="PowerConsumption_Zone1",
              labels = {'Datetime':'Months of the year'},
              title = "Общая мощность, выработанная с января по декабрь в первой зоне")
fig.show()

fig = px.line(df,
              x="Datetime",
              y="PowerConsumption_Zone1",
              labels = {'Datetime':'Months of the year'},
              title = "Общая мощность, выработанная с января по декабрь")

fig.update_layout(
    template='plotly',
    font=dict(size=10),
    title={
        'text': "Общая мощность, выработанная с января по декабрь в первой зоне",
        'font': {'size': 25}
    }
)
fig.show()

fig = px.box(df,
        x=df.index.month,
        y="PowerConsumption_Zone1",
        color=df.index.month,
        labels = {"x" : "Месяцы"},
        title="Выработка электроэнергии | Месячная статистика ")

fig.update_traces(width=0.5)
fig.show()

fig = px.box(df,
        x=df.index.day,
        y="PowerConsumption_Zone1",
        color=df.index.day,
        labels = {"x" : "Дни"})

fig.update_traces(width=0.5)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="PowerConsumption_Zone1",
              labels = {'Month':'Месяцы'},
              color = "PowerConsumption_Zone1",
              title="Выработка электроэнергии в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="WindSpeed",
              labels = {'Month':'Месяцы'},
              color = "WindSpeed",
              title="Скорость ветра в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.bar(grouped,
              x=grouped.index,
              y="Temperature",
              labels = {'Month':'Month in the year'},
              color = "Temperature",
              title="Температура воздуха в месяц")
fig.update_traces(width=0.6)
fig.update_layout(barmode='group', xaxis_tickangle=-45)
fig.show()

fig = px.box(df,
             y="PowerConsumption_Zone1",
             title="Общая статистика выработки электроэнергии")

fig.show()

fig = px.box(df,
             y="WindSpeed",
             title="Общая статистика скорости ветра")

fig.show()

df_corr = df.corr()
df_corr

x = list(df_corr.columns)
y = list(df_corr.index)
z = np.array(df_corr)

fig = ff.create_annotated_heatmap(x = x,
                                  y = y,
                                  z = z,
                                  annotation_text = np.around(z, decimals=2))
fig.show()

fig = px.scatter_polar(df,
                       r="PowerConsumption_Zone1",
                       theta="WindSpeed")
fig.show()

fig = px.scatter(df,
                 x="WindSpeed",
                 y="PowerConsumption_Zone1",
                 title = "Power generated vs Wind Speed")
fig.show()
